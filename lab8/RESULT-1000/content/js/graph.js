/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 89.0, "minX": 0.0, "maxY": 5306.0, "series": [{"data": [[0.0, 139.0], [0.1, 140.0], [0.2, 140.0], [0.3, 140.0], [0.4, 140.0], [0.5, 141.0], [0.6, 141.0], [0.7, 141.0], [0.8, 142.0], [0.9, 142.0], [1.0, 142.0], [1.1, 142.0], [1.2, 142.0], [1.3, 142.0], [1.4, 142.0], [1.5, 142.0], [1.6, 142.0], [1.7, 142.0], [1.8, 142.0], [1.9, 142.0], [2.0, 142.0], [2.1, 142.0], [2.2, 142.0], [2.3, 142.0], [2.4, 142.0], [2.5, 142.0], [2.6, 142.0], [2.7, 142.0], [2.8, 142.0], [2.9, 142.0], [3.0, 143.0], [3.1, 143.0], [3.2, 143.0], [3.3, 143.0], [3.4, 143.0], [3.5, 143.0], [3.6, 143.0], [3.7, 143.0], [3.8, 143.0], [3.9, 143.0], [4.0, 143.0], [4.1, 143.0], [4.2, 143.0], [4.3, 143.0], [4.4, 143.0], [4.5, 143.0], [4.6, 143.0], [4.7, 144.0], [4.8, 144.0], [4.9, 144.0], [5.0, 144.0], [5.1, 144.0], [5.2, 144.0], [5.3, 144.0], [5.4, 144.0], [5.5, 144.0], [5.6, 144.0], [5.7, 144.0], [5.8, 144.0], [5.9, 144.0], [6.0, 144.0], [6.1, 144.0], [6.2, 144.0], [6.3, 144.0], [6.4, 145.0], [6.5, 145.0], [6.6, 145.0], [6.7, 145.0], [6.8, 145.0], [6.9, 145.0], [7.0, 145.0], [7.1, 145.0], [7.2, 145.0], [7.3, 145.0], [7.4, 145.0], [7.5, 145.0], [7.6, 145.0], [7.7, 145.0], [7.8, 145.0], [7.9, 146.0], [8.0, 146.0], [8.1, 146.0], [8.2, 146.0], [8.3, 146.0], [8.4, 146.0], [8.5, 146.0], [8.6, 146.0], [8.7, 146.0], [8.8, 146.0], [8.9, 147.0], [9.0, 147.0], [9.1, 147.0], [9.2, 147.0], [9.3, 147.0], [9.4, 147.0], [9.5, 147.0], [9.6, 148.0], [9.7, 148.0], [9.8, 148.0], [9.9, 148.0], [10.0, 148.0], [10.1, 148.0], [10.2, 148.0], [10.3, 148.0], [10.4, 149.0], [10.5, 149.0], [10.6, 149.0], [10.7, 149.0], [10.8, 149.0], [10.9, 149.0], [11.0, 149.0], [11.1, 149.0], [11.2, 149.0], [11.3, 149.0], [11.4, 149.0], [11.5, 149.0], [11.6, 150.0], [11.7, 150.0], [11.8, 150.0], [11.9, 150.0], [12.0, 150.0], [12.1, 150.0], [12.2, 150.0], [12.3, 150.0], [12.4, 151.0], [12.5, 151.0], [12.6, 151.0], [12.7, 151.0], [12.8, 151.0], [12.9, 151.0], [13.0, 151.0], [13.1, 151.0], [13.2, 151.0], [13.3, 151.0], [13.4, 151.0], [13.5, 152.0], [13.6, 152.0], [13.7, 152.0], [13.8, 152.0], [13.9, 152.0], [14.0, 152.0], [14.1, 152.0], [14.2, 152.0], [14.3, 152.0], [14.4, 152.0], [14.5, 153.0], [14.6, 153.0], [14.7, 153.0], [14.8, 153.0], [14.9, 153.0], [15.0, 153.0], [15.1, 153.0], [15.2, 153.0], [15.3, 153.0], [15.4, 153.0], [15.5, 153.0], [15.6, 153.0], [15.7, 153.0], [15.8, 153.0], [15.9, 154.0], [16.0, 154.0], [16.1, 154.0], [16.2, 154.0], [16.3, 154.0], [16.4, 154.0], [16.5, 154.0], [16.6, 154.0], [16.7, 154.0], [16.8, 155.0], [16.9, 155.0], [17.0, 155.0], [17.1, 155.0], [17.2, 155.0], [17.3, 155.0], [17.4, 155.0], [17.5, 155.0], [17.6, 155.0], [17.7, 155.0], [17.8, 156.0], [17.9, 156.0], [18.0, 156.0], [18.1, 156.0], [18.2, 156.0], [18.3, 156.0], [18.4, 156.0], [18.5, 156.0], [18.6, 156.0], [18.7, 156.0], [18.8, 156.0], [18.9, 156.0], [19.0, 156.0], [19.1, 156.0], [19.2, 156.0], [19.3, 157.0], [19.4, 157.0], [19.5, 157.0], [19.6, 157.0], [19.7, 157.0], [19.8, 157.0], [19.9, 157.0], [20.0, 157.0], [20.1, 157.0], [20.2, 157.0], [20.3, 157.0], [20.4, 157.0], [20.5, 157.0], [20.6, 157.0], [20.7, 158.0], [20.8, 158.0], [20.9, 158.0], [21.0, 158.0], [21.1, 158.0], [21.2, 158.0], [21.3, 158.0], [21.4, 158.0], [21.5, 158.0], [21.6, 158.0], [21.7, 158.0], [21.8, 158.0], [21.9, 158.0], [22.0, 159.0], [22.1, 159.0], [22.2, 159.0], [22.3, 159.0], [22.4, 159.0], [22.5, 159.0], [22.6, 159.0], [22.7, 159.0], [22.8, 160.0], [22.9, 160.0], [23.0, 160.0], [23.1, 160.0], [23.2, 160.0], [23.3, 160.0], [23.4, 160.0], [23.5, 161.0], [23.6, 161.0], [23.7, 161.0], [23.8, 161.0], [23.9, 161.0], [24.0, 161.0], [24.1, 161.0], [24.2, 161.0], [24.3, 161.0], [24.4, 161.0], [24.5, 161.0], [24.6, 161.0], [24.7, 161.0], [24.8, 161.0], [24.9, 161.0], [25.0, 161.0], [25.1, 162.0], [25.2, 162.0], [25.3, 162.0], [25.4, 162.0], [25.5, 162.0], [25.6, 162.0], [25.7, 162.0], [25.8, 162.0], [25.9, 162.0], [26.0, 162.0], [26.1, 162.0], [26.2, 162.0], [26.3, 162.0], [26.4, 162.0], [26.5, 163.0], [26.6, 163.0], [26.7, 163.0], [26.8, 163.0], [26.9, 163.0], [27.0, 163.0], [27.1, 163.0], [27.2, 163.0], [27.3, 163.0], [27.4, 163.0], [27.5, 163.0], [27.6, 164.0], [27.7, 164.0], [27.8, 164.0], [27.9, 164.0], [28.0, 164.0], [28.1, 164.0], [28.2, 164.0], [28.3, 164.0], [28.4, 164.0], [28.5, 164.0], [28.6, 164.0], [28.7, 164.0], [28.8, 164.0], [28.9, 164.0], [29.0, 165.0], [29.1, 165.0], [29.2, 165.0], [29.3, 165.0], [29.4, 165.0], [29.5, 165.0], [29.6, 165.0], [29.7, 165.0], [29.8, 165.0], [29.9, 165.0], [30.0, 165.0], [30.1, 165.0], [30.2, 165.0], [30.3, 165.0], [30.4, 165.0], [30.5, 165.0], [30.6, 165.0], [30.7, 166.0], [30.8, 166.0], [30.9, 166.0], [31.0, 166.0], [31.1, 166.0], [31.2, 166.0], [31.3, 166.0], [31.4, 166.0], [31.5, 166.0], [31.6, 166.0], [31.7, 166.0], [31.8, 166.0], [31.9, 166.0], [32.0, 167.0], [32.1, 167.0], [32.2, 167.0], [32.3, 167.0], [32.4, 167.0], [32.5, 167.0], [32.6, 167.0], [32.7, 167.0], [32.8, 167.0], [32.9, 167.0], [33.0, 167.0], [33.1, 168.0], [33.2, 168.0], [33.3, 168.0], [33.4, 168.0], [33.5, 168.0], [33.6, 168.0], [33.7, 168.0], [33.8, 168.0], [33.9, 169.0], [34.0, 169.0], [34.1, 169.0], [34.2, 169.0], [34.3, 169.0], [34.4, 169.0], [34.5, 169.0], [34.6, 169.0], [34.7, 169.0], [34.8, 170.0], [34.9, 170.0], [35.0, 170.0], [35.1, 170.0], [35.2, 170.0], [35.3, 170.0], [35.4, 170.0], [35.5, 170.0], [35.6, 170.0], [35.7, 170.0], [35.8, 170.0], [35.9, 170.0], [36.0, 171.0], [36.1, 171.0], [36.2, 171.0], [36.3, 171.0], [36.4, 171.0], [36.5, 171.0], [36.6, 171.0], [36.7, 171.0], [36.8, 171.0], [36.9, 171.0], [37.0, 171.0], [37.1, 171.0], [37.2, 171.0], [37.3, 171.0], [37.4, 172.0], [37.5, 172.0], [37.6, 172.0], [37.7, 172.0], [37.8, 172.0], [37.9, 172.0], [38.0, 172.0], [38.1, 172.0], [38.2, 172.0], [38.3, 172.0], [38.4, 172.0], [38.5, 172.0], [38.6, 172.0], [38.7, 173.0], [38.8, 173.0], [38.9, 173.0], [39.0, 173.0], [39.1, 173.0], [39.2, 173.0], [39.3, 173.0], [39.4, 173.0], [39.5, 173.0], [39.6, 173.0], [39.7, 174.0], [39.8, 174.0], [39.9, 174.0], [40.0, 174.0], [40.1, 174.0], [40.2, 174.0], [40.3, 174.0], [40.4, 174.0], [40.5, 174.0], [40.6, 174.0], [40.7, 174.0], [40.8, 174.0], [40.9, 174.0], [41.0, 174.0], [41.1, 174.0], [41.2, 174.0], [41.3, 174.0], [41.4, 174.0], [41.5, 175.0], [41.6, 175.0], [41.7, 175.0], [41.8, 175.0], [41.9, 175.0], [42.0, 175.0], [42.1, 175.0], [42.2, 175.0], [42.3, 175.0], [42.4, 175.0], [42.5, 175.0], [42.6, 175.0], [42.7, 175.0], [42.8, 175.0], [42.9, 176.0], [43.0, 176.0], [43.1, 176.0], [43.2, 176.0], [43.3, 176.0], [43.4, 176.0], [43.5, 176.0], [43.6, 177.0], [43.7, 177.0], [43.8, 177.0], [43.9, 177.0], [44.0, 177.0], [44.1, 177.0], [44.2, 177.0], [44.3, 177.0], [44.4, 177.0], [44.5, 177.0], [44.6, 177.0], [44.7, 177.0], [44.8, 177.0], [44.9, 178.0], [45.0, 178.0], [45.1, 178.0], [45.2, 178.0], [45.3, 178.0], [45.4, 178.0], [45.5, 178.0], [45.6, 178.0], [45.7, 178.0], [45.8, 178.0], [45.9, 178.0], [46.0, 179.0], [46.1, 179.0], [46.2, 179.0], [46.3, 179.0], [46.4, 179.0], [46.5, 179.0], [46.6, 179.0], [46.7, 179.0], [46.8, 179.0], [46.9, 179.0], [47.0, 179.0], [47.1, 179.0], [47.2, 179.0], [47.3, 180.0], [47.4, 180.0], [47.5, 180.0], [47.6, 180.0], [47.7, 180.0], [47.8, 180.0], [47.9, 180.0], [48.0, 180.0], [48.1, 180.0], [48.2, 180.0], [48.3, 180.0], [48.4, 180.0], [48.5, 181.0], [48.6, 181.0], [48.7, 181.0], [48.8, 181.0], [48.9, 181.0], [49.0, 181.0], [49.1, 181.0], [49.2, 181.0], [49.3, 181.0], [49.4, 182.0], [49.5, 182.0], [49.6, 182.0], [49.7, 182.0], [49.8, 182.0], [49.9, 182.0], [50.0, 183.0], [50.1, 183.0], [50.2, 183.0], [50.3, 183.0], [50.4, 183.0], [50.5, 183.0], [50.6, 183.0], [50.7, 183.0], [50.8, 183.0], [50.9, 184.0], [51.0, 184.0], [51.1, 184.0], [51.2, 184.0], [51.3, 184.0], [51.4, 184.0], [51.5, 184.0], [51.6, 184.0], [51.7, 184.0], [51.8, 184.0], [51.9, 184.0], [52.0, 184.0], [52.1, 184.0], [52.2, 184.0], [52.3, 184.0], [52.4, 184.0], [52.5, 185.0], [52.6, 185.0], [52.7, 185.0], [52.8, 185.0], [52.9, 185.0], [53.0, 185.0], [53.1, 185.0], [53.2, 185.0], [53.3, 185.0], [53.4, 185.0], [53.5, 186.0], [53.6, 186.0], [53.7, 186.0], [53.8, 186.0], [53.9, 186.0], [54.0, 186.0], [54.1, 186.0], [54.2, 186.0], [54.3, 187.0], [54.4, 187.0], [54.5, 187.0], [54.6, 187.0], [54.7, 187.0], [54.8, 187.0], [54.9, 187.0], [55.0, 187.0], [55.1, 187.0], [55.2, 187.0], [55.3, 188.0], [55.4, 188.0], [55.5, 188.0], [55.6, 188.0], [55.7, 189.0], [55.8, 189.0], [55.9, 189.0], [56.0, 189.0], [56.1, 189.0], [56.2, 189.0], [56.3, 189.0], [56.4, 189.0], [56.5, 189.0], [56.6, 189.0], [56.7, 189.0], [56.8, 190.0], [56.9, 191.0], [57.0, 191.0], [57.1, 191.0], [57.2, 192.0], [57.3, 192.0], [57.4, 192.0], [57.5, 192.0], [57.6, 192.0], [57.7, 192.0], [57.8, 192.0], [57.9, 192.0], [58.0, 193.0], [58.1, 193.0], [58.2, 193.0], [58.3, 193.0], [58.4, 194.0], [58.5, 194.0], [58.6, 194.0], [58.7, 194.0], [58.8, 195.0], [58.9, 195.0], [59.0, 195.0], [59.1, 195.0], [59.2, 195.0], [59.3, 196.0], [59.4, 196.0], [59.5, 196.0], [59.6, 196.0], [59.7, 196.0], [59.8, 197.0], [59.9, 197.0], [60.0, 197.0], [60.1, 197.0], [60.2, 198.0], [60.3, 198.0], [60.4, 198.0], [60.5, 199.0], [60.6, 199.0], [60.7, 200.0], [60.8, 200.0], [60.9, 200.0], [61.0, 200.0], [61.1, 202.0], [61.2, 202.0], [61.3, 202.0], [61.4, 202.0], [61.5, 203.0], [61.6, 203.0], [61.7, 204.0], [61.8, 204.0], [61.9, 204.0], [62.0, 205.0], [62.1, 205.0], [62.2, 205.0], [62.3, 206.0], [62.4, 206.0], [62.5, 207.0], [62.6, 208.0], [62.7, 208.0], [62.8, 208.0], [62.9, 208.0], [63.0, 209.0], [63.1, 210.0], [63.2, 211.0], [63.3, 211.0], [63.4, 212.0], [63.5, 212.0], [63.6, 213.0], [63.7, 215.0], [63.8, 218.0], [63.9, 220.0], [64.0, 221.0], [64.1, 229.0], [64.2, 231.0], [64.3, 233.0], [64.4, 236.0], [64.5, 236.0], [64.6, 238.0], [64.7, 252.0], [64.8, 255.0], [64.9, 259.0], [65.0, 279.0], [65.1, 286.0], [65.2, 287.0], [65.3, 303.0], [65.4, 317.0], [65.5, 321.0], [65.6, 321.0], [65.7, 324.0], [65.8, 327.0], [65.9, 332.0], [66.0, 335.0], [66.1, 343.0], [66.2, 353.0], [66.3, 354.0], [66.4, 479.0], [66.5, 486.0], [66.6, 496.0], [66.7, 500.0], [66.8, 500.0], [66.9, 506.0], [67.0, 508.0], [67.1, 511.0], [67.2, 512.0], [67.3, 512.0], [67.4, 514.0], [67.5, 518.0], [67.6, 522.0], [67.7, 523.0], [67.8, 530.0], [67.9, 532.0], [68.0, 532.0], [68.1, 533.0], [68.2, 539.0], [68.3, 541.0], [68.4, 571.0], [68.5, 572.0], [68.6, 583.0], [68.7, 590.0], [68.8, 596.0], [68.9, 661.0], [69.0, 692.0], [69.1, 714.0], [69.2, 727.0], [69.3, 767.0], [69.4, 865.0], [69.5, 1150.0], [69.6, 1156.0], [69.7, 1157.0], [69.8, 1159.0], [69.9, 1164.0], [70.0, 1166.0], [70.1, 1167.0], [70.2, 1169.0], [70.3, 1169.0], [70.4, 1171.0], [70.5, 1176.0], [70.6, 1181.0], [70.7, 1183.0], [70.8, 1195.0], [70.9, 1195.0], [71.0, 1196.0], [71.1, 1316.0], [71.2, 1573.0], [71.3, 1664.0], [71.4, 1669.0], [71.5, 1689.0], [71.6, 1732.0], [71.7, 1744.0], [71.8, 1769.0], [71.9, 1786.0], [72.0, 1790.0], [72.1, 1807.0], [72.2, 1807.0], [72.3, 1833.0], [72.4, 1848.0], [72.5, 1850.0], [72.6, 1857.0], [72.7, 1862.0], [72.8, 1863.0], [72.9, 1870.0], [73.0, 1879.0], [73.1, 1879.0], [73.2, 1884.0], [73.3, 1886.0], [73.4, 1889.0], [73.5, 1892.0], [73.6, 1902.0], [73.7, 1903.0], [73.8, 1905.0], [73.9, 1914.0], [74.0, 1932.0], [74.1, 1932.0], [74.2, 1935.0], [74.3, 1948.0], [74.4, 1950.0], [74.5, 1951.0], [74.6, 1954.0], [74.7, 1957.0], [74.8, 1959.0], [74.9, 1959.0], [75.0, 1967.0], [75.1, 1979.0], [75.2, 1983.0], [75.3, 1983.0], [75.4, 1984.0], [75.5, 1984.0], [75.6, 1988.0], [75.7, 1992.0], [75.8, 1995.0], [75.9, 1999.0], [76.0, 2000.0], [76.1, 2007.0], [76.2, 2009.0], [76.3, 2009.0], [76.4, 2011.0], [76.5, 2012.0], [76.6, 2014.0], [76.7, 2016.0], [76.8, 2019.0], [76.9, 2023.0], [77.0, 2024.0], [77.1, 2027.0], [77.2, 2028.0], [77.3, 2029.0], [77.4, 2030.0], [77.5, 2030.0], [77.6, 2033.0], [77.7, 2037.0], [77.8, 2039.0], [77.9, 2039.0], [78.0, 2044.0], [78.1, 2049.0], [78.2, 2052.0], [78.3, 2053.0], [78.4, 2059.0], [78.5, 2059.0], [78.6, 2063.0], [78.7, 2068.0], [78.8, 2071.0], [78.9, 2073.0], [79.0, 2074.0], [79.1, 2079.0], [79.2, 2081.0], [79.3, 2084.0], [79.4, 2084.0], [79.5, 2085.0], [79.6, 2093.0], [79.7, 2095.0], [79.8, 2099.0], [79.9, 2102.0], [80.0, 2105.0], [80.1, 2108.0], [80.2, 2108.0], [80.3, 2118.0], [80.4, 2120.0], [80.5, 2121.0], [80.6, 2122.0], [80.7, 2122.0], [80.8, 2124.0], [80.9, 2124.0], [81.0, 2132.0], [81.1, 2133.0], [81.2, 2138.0], [81.3, 2139.0], [81.4, 2141.0], [81.5, 2145.0], [81.6, 2147.0], [81.7, 2150.0], [81.8, 2153.0], [81.9, 2162.0], [82.0, 2165.0], [82.1, 2166.0], [82.2, 2168.0], [82.3, 2168.0], [82.4, 2170.0], [82.5, 2172.0], [82.6, 2177.0], [82.7, 2182.0], [82.8, 2185.0], [82.9, 2188.0], [83.0, 2188.0], [83.1, 2193.0], [83.2, 2196.0], [83.3, 2199.0], [83.4, 2199.0], [83.5, 2206.0], [83.6, 2206.0], [83.7, 2215.0], [83.8, 2215.0], [83.9, 2216.0], [84.0, 2232.0], [84.1, 2232.0], [84.2, 2236.0], [84.3, 2237.0], [84.4, 2244.0], [84.5, 2246.0], [84.6, 2249.0], [84.7, 2254.0], [84.8, 2263.0], [84.9, 2267.0], [85.0, 2273.0], [85.1, 2275.0], [85.2, 2277.0], [85.3, 2278.0], [85.4, 2281.0], [85.5, 2283.0], [85.6, 2284.0], [85.7, 2293.0], [85.8, 2301.0], [85.9, 2304.0], [86.0, 2312.0], [86.1, 2313.0], [86.2, 2313.0], [86.3, 2314.0], [86.4, 2314.0], [86.5, 2323.0], [86.6, 2344.0], [86.7, 2350.0], [86.8, 2351.0], [86.9, 2354.0], [87.0, 2360.0], [87.1, 2363.0], [87.2, 2369.0], [87.3, 2369.0], [87.4, 2373.0], [87.5, 2376.0], [87.6, 2376.0], [87.7, 2379.0], [87.8, 2380.0], [87.9, 2380.0], [88.0, 2385.0], [88.1, 2387.0], [88.2, 2416.0], [88.3, 2451.0], [88.4, 2456.0], [88.5, 2459.0], [88.6, 2463.0], [88.7, 2466.0], [88.8, 2474.0], [88.9, 2477.0], [89.0, 2479.0], [89.1, 2487.0], [89.2, 2488.0], [89.3, 2504.0], [89.4, 2514.0], [89.5, 2520.0], [89.6, 2526.0], [89.7, 2560.0], [89.8, 2560.0], [89.9, 2568.0], [90.0, 2574.0], [90.1, 2580.0], [90.2, 2587.0], [90.3, 2597.0], [90.4, 2599.0], [90.5, 2600.0], [90.6, 2609.0], [90.7, 2615.0], [90.8, 2617.0], [90.9, 2622.0], [91.0, 2626.0], [91.1, 2627.0], [91.2, 2637.0], [91.3, 2644.0], [91.4, 2645.0], [91.5, 2655.0], [91.6, 2663.0], [91.7, 2682.0], [91.8, 2690.0], [91.9, 2695.0], [92.0, 2752.0], [92.1, 2778.0], [92.2, 2803.0], [92.3, 2815.0], [92.4, 2845.0], [92.5, 2911.0], [92.6, 2967.0], [92.7, 2983.0], [92.8, 3017.0], [92.9, 3034.0], [93.0, 3040.0], [93.1, 3084.0], [93.2, 3097.0], [93.3, 3103.0], [93.4, 3165.0], [93.5, 3178.0], [93.6, 3229.0], [93.7, 3243.0], [93.8, 3262.0], [93.9, 3288.0], [94.0, 3309.0], [94.1, 3310.0], [94.2, 3318.0], [94.3, 3318.0], [94.4, 3324.0], [94.5, 3344.0], [94.6, 3356.0], [94.7, 3358.0], [94.8, 3373.0], [94.9, 3429.0], [95.0, 3452.0], [95.1, 3484.0], [95.2, 3512.0], [95.3, 3546.0], [95.4, 3604.0], [95.5, 3615.0], [95.6, 3641.0], [95.7, 3674.0], [95.8, 3682.0], [95.9, 3683.0], [96.0, 3699.0], [96.1, 3746.0], [96.2, 3780.0], [96.3, 3784.0], [96.4, 3796.0], [96.5, 3800.0], [96.6, 3846.0], [96.7, 3877.0], [96.8, 3881.0], [96.9, 3902.0], [97.0, 3913.0], [97.1, 3940.0], [97.2, 3953.0], [97.3, 4001.0], [97.4, 4016.0], [97.5, 4060.0], [97.6, 4107.0], [97.7, 4115.0], [97.8, 4122.0], [97.9, 4125.0], [98.0, 4202.0], [98.1, 4204.0], [98.2, 4261.0], [98.3, 4273.0], [98.4, 4275.0], [98.5, 4306.0], [98.6, 4320.0], [98.7, 4376.0], [98.8, 4387.0], [98.9, 4395.0], [99.0, 4419.0], [99.1, 4506.0], [99.2, 4585.0], [99.3, 4596.0], [99.4, 4610.0], [99.5, 4631.0], [99.6, 4666.0], [99.7, 4876.0], [99.8, 4898.0], [99.9, 5213.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[0.0, 89.0], [0.1, 89.0], [0.2, 89.0], [0.3, 90.0], [0.4, 90.0], [0.5, 90.0], [0.6, 90.0], [0.7, 90.0], [0.8, 90.0], [0.9, 90.0], [1.0, 90.0], [1.1, 90.0], [1.2, 90.0], [1.3, 90.0], [1.4, 90.0], [1.5, 90.0], [1.6, 90.0], [1.7, 90.0], [1.8, 90.0], [1.9, 90.0], [2.0, 91.0], [2.1, 91.0], [2.2, 91.0], [2.3, 91.0], [2.4, 91.0], [2.5, 91.0], [2.6, 91.0], [2.7, 91.0], [2.8, 91.0], [2.9, 91.0], [3.0, 91.0], [3.1, 91.0], [3.2, 91.0], [3.3, 91.0], [3.4, 91.0], [3.5, 91.0], [3.6, 91.0], [3.7, 91.0], [3.8, 91.0], [3.9, 91.0], [4.0, 91.0], [4.1, 91.0], [4.2, 91.0], [4.3, 91.0], [4.4, 91.0], [4.5, 91.0], [4.6, 91.0], [4.7, 91.0], [4.8, 91.0], [4.9, 91.0], [5.0, 92.0], [5.1, 92.0], [5.2, 92.0], [5.3, 92.0], [5.4, 92.0], [5.5, 92.0], [5.6, 92.0], [5.7, 92.0], [5.8, 92.0], [5.9, 92.0], [6.0, 92.0], [6.1, 92.0], [6.2, 92.0], [6.3, 92.0], [6.4, 92.0], [6.5, 92.0], [6.6, 92.0], [6.7, 92.0], [6.8, 92.0], [6.9, 92.0], [7.0, 92.0], [7.1, 92.0], [7.2, 92.0], [7.3, 92.0], [7.4, 92.0], [7.5, 92.0], [7.6, 92.0], [7.7, 92.0], [7.8, 92.0], [7.9, 92.0], [8.0, 92.0], [8.1, 92.0], [8.2, 92.0], [8.3, 92.0], [8.4, 92.0], [8.5, 92.0], [8.6, 92.0], [8.7, 92.0], [8.8, 93.0], [8.9, 93.0], [9.0, 93.0], [9.1, 93.0], [9.2, 93.0], [9.3, 93.0], [9.4, 93.0], [9.5, 93.0], [9.6, 93.0], [9.7, 93.0], [9.8, 93.0], [9.9, 93.0], [10.0, 93.0], [10.1, 93.0], [10.2, 93.0], [10.3, 93.0], [10.4, 93.0], [10.5, 93.0], [10.6, 93.0], [10.7, 93.0], [10.8, 93.0], [10.9, 93.0], [11.0, 93.0], [11.1, 93.0], [11.2, 93.0], [11.3, 93.0], [11.4, 93.0], [11.5, 93.0], [11.6, 93.0], [11.7, 93.0], [11.8, 93.0], [11.9, 93.0], [12.0, 93.0], [12.1, 93.0], [12.2, 93.0], [12.3, 93.0], [12.4, 93.0], [12.5, 93.0], [12.6, 93.0], [12.7, 93.0], [12.8, 93.0], [12.9, 93.0], [13.0, 93.0], [13.1, 93.0], [13.2, 94.0], [13.3, 94.0], [13.4, 94.0], [13.5, 94.0], [13.6, 94.0], [13.7, 94.0], [13.8, 94.0], [13.9, 94.0], [14.0, 94.0], [14.1, 94.0], [14.2, 94.0], [14.3, 94.0], [14.4, 94.0], [14.5, 94.0], [14.6, 94.0], [14.7, 94.0], [14.8, 94.0], [14.9, 94.0], [15.0, 94.0], [15.1, 94.0], [15.2, 94.0], [15.3, 94.0], [15.4, 94.0], [15.5, 95.0], [15.6, 95.0], [15.7, 95.0], [15.8, 95.0], [15.9, 95.0], [16.0, 95.0], [16.1, 95.0], [16.2, 95.0], [16.3, 95.0], [16.4, 95.0], [16.5, 95.0], [16.6, 95.0], [16.7, 95.0], [16.8, 95.0], [16.9, 95.0], [17.0, 95.0], [17.1, 95.0], [17.2, 95.0], [17.3, 95.0], [17.4, 95.0], [17.5, 95.0], [17.6, 95.0], [17.7, 95.0], [17.8, 96.0], [17.9, 96.0], [18.0, 96.0], [18.1, 96.0], [18.2, 96.0], [18.3, 96.0], [18.4, 96.0], [18.5, 96.0], [18.6, 96.0], [18.7, 96.0], [18.8, 96.0], [18.9, 96.0], [19.0, 96.0], [19.1, 96.0], [19.2, 96.0], [19.3, 96.0], [19.4, 96.0], [19.5, 96.0], [19.6, 96.0], [19.7, 96.0], [19.8, 96.0], [19.9, 96.0], [20.0, 96.0], [20.1, 96.0], [20.2, 96.0], [20.3, 96.0], [20.4, 97.0], [20.5, 97.0], [20.6, 97.0], [20.7, 97.0], [20.8, 97.0], [20.9, 97.0], [21.0, 97.0], [21.1, 97.0], [21.2, 97.0], [21.3, 97.0], [21.4, 97.0], [21.5, 97.0], [21.6, 97.0], [21.7, 97.0], [21.8, 97.0], [21.9, 97.0], [22.0, 97.0], [22.1, 97.0], [22.2, 97.0], [22.3, 97.0], [22.4, 97.0], [22.5, 97.0], [22.6, 97.0], [22.7, 97.0], [22.8, 97.0], [22.9, 97.0], [23.0, 97.0], [23.1, 97.0], [23.2, 97.0], [23.3, 97.0], [23.4, 97.0], [23.5, 98.0], [23.6, 98.0], [23.7, 98.0], [23.8, 98.0], [23.9, 98.0], [24.0, 98.0], [24.1, 98.0], [24.2, 98.0], [24.3, 98.0], [24.4, 98.0], [24.5, 98.0], [24.6, 98.0], [24.7, 98.0], [24.8, 98.0], [24.9, 98.0], [25.0, 98.0], [25.1, 98.0], [25.2, 98.0], [25.3, 98.0], [25.4, 98.0], [25.5, 98.0], [25.6, 98.0], [25.7, 98.0], [25.8, 98.0], [25.9, 98.0], [26.0, 99.0], [26.1, 99.0], [26.2, 99.0], [26.3, 99.0], [26.4, 99.0], [26.5, 99.0], [26.6, 99.0], [26.7, 99.0], [26.8, 99.0], [26.9, 99.0], [27.0, 99.0], [27.1, 99.0], [27.2, 99.0], [27.3, 99.0], [27.4, 99.0], [27.5, 99.0], [27.6, 100.0], [27.7, 100.0], [27.8, 100.0], [27.9, 100.0], [28.0, 100.0], [28.1, 100.0], [28.2, 100.0], [28.3, 100.0], [28.4, 100.0], [28.5, 100.0], [28.6, 100.0], [28.7, 100.0], [28.8, 100.0], [28.9, 100.0], [29.0, 100.0], [29.1, 100.0], [29.2, 100.0], [29.3, 100.0], [29.4, 100.0], [29.5, 100.0], [29.6, 100.0], [29.7, 100.0], [29.8, 100.0], [29.9, 100.0], [30.0, 100.0], [30.1, 100.0], [30.2, 100.0], [30.3, 101.0], [30.4, 101.0], [30.5, 101.0], [30.6, 101.0], [30.7, 101.0], [30.8, 101.0], [30.9, 101.0], [31.0, 101.0], [31.1, 101.0], [31.2, 101.0], [31.3, 101.0], [31.4, 101.0], [31.5, 101.0], [31.6, 101.0], [31.7, 101.0], [31.8, 101.0], [31.9, 101.0], [32.0, 101.0], [32.1, 101.0], [32.2, 101.0], [32.3, 101.0], [32.4, 101.0], [32.5, 101.0], [32.6, 101.0], [32.7, 102.0], [32.8, 102.0], [32.9, 102.0], [33.0, 102.0], [33.1, 102.0], [33.2, 102.0], [33.3, 102.0], [33.4, 102.0], [33.5, 102.0], [33.6, 102.0], [33.7, 102.0], [33.8, 102.0], [33.9, 102.0], [34.0, 102.0], [34.1, 102.0], [34.2, 102.0], [34.3, 102.0], [34.4, 102.0], [34.5, 102.0], [34.6, 102.0], [34.7, 102.0], [34.8, 102.0], [34.9, 102.0], [35.0, 102.0], [35.1, 102.0], [35.2, 102.0], [35.3, 102.0], [35.4, 102.0], [35.5, 102.0], [35.6, 102.0], [35.7, 102.0], [35.8, 103.0], [35.9, 103.0], [36.0, 103.0], [36.1, 103.0], [36.2, 103.0], [36.3, 103.0], [36.4, 103.0], [36.5, 103.0], [36.6, 103.0], [36.7, 103.0], [36.8, 103.0], [36.9, 103.0], [37.0, 103.0], [37.1, 103.0], [37.2, 103.0], [37.3, 103.0], [37.4, 103.0], [37.5, 103.0], [37.6, 103.0], [37.7, 103.0], [37.8, 103.0], [37.9, 103.0], [38.0, 103.0], [38.1, 103.0], [38.2, 103.0], [38.3, 103.0], [38.4, 103.0], [38.5, 103.0], [38.6, 103.0], [38.7, 103.0], [38.8, 103.0], [38.9, 103.0], [39.0, 103.0], [39.1, 103.0], [39.2, 104.0], [39.3, 104.0], [39.4, 104.0], [39.5, 104.0], [39.6, 104.0], [39.7, 104.0], [39.8, 104.0], [39.9, 104.0], [40.0, 104.0], [40.1, 104.0], [40.2, 104.0], [40.3, 104.0], [40.4, 104.0], [40.5, 104.0], [40.6, 104.0], [40.7, 104.0], [40.8, 104.0], [40.9, 104.0], [41.0, 104.0], [41.1, 104.0], [41.2, 105.0], [41.3, 105.0], [41.4, 105.0], [41.5, 105.0], [41.6, 105.0], [41.7, 105.0], [41.8, 105.0], [41.9, 105.0], [42.0, 105.0], [42.1, 105.0], [42.2, 105.0], [42.3, 105.0], [42.4, 105.0], [42.5, 105.0], [42.6, 105.0], [42.7, 105.0], [42.8, 105.0], [42.9, 105.0], [43.0, 105.0], [43.1, 105.0], [43.2, 105.0], [43.3, 105.0], [43.4, 105.0], [43.5, 106.0], [43.6, 106.0], [43.7, 106.0], [43.8, 106.0], [43.9, 106.0], [44.0, 106.0], [44.1, 106.0], [44.2, 106.0], [44.3, 106.0], [44.4, 106.0], [44.5, 106.0], [44.6, 106.0], [44.7, 106.0], [44.8, 106.0], [44.9, 106.0], [45.0, 106.0], [45.1, 106.0], [45.2, 106.0], [45.3, 106.0], [45.4, 106.0], [45.5, 106.0], [45.6, 106.0], [45.7, 107.0], [45.8, 107.0], [45.9, 107.0], [46.0, 107.0], [46.1, 107.0], [46.2, 107.0], [46.3, 107.0], [46.4, 107.0], [46.5, 107.0], [46.6, 107.0], [46.7, 107.0], [46.8, 107.0], [46.9, 107.0], [47.0, 107.0], [47.1, 107.0], [47.2, 107.0], [47.3, 107.0], [47.4, 107.0], [47.5, 107.0], [47.6, 107.0], [47.7, 107.0], [47.8, 107.0], [47.9, 107.0], [48.0, 107.0], [48.1, 107.0], [48.2, 107.0], [48.3, 107.0], [48.4, 108.0], [48.5, 108.0], [48.6, 108.0], [48.7, 108.0], [48.8, 108.0], [48.9, 108.0], [49.0, 108.0], [49.1, 108.0], [49.2, 108.0], [49.3, 108.0], [49.4, 108.0], [49.5, 108.0], [49.6, 108.0], [49.7, 109.0], [49.8, 109.0], [49.9, 109.0], [50.0, 109.0], [50.1, 109.0], [50.2, 109.0], [50.3, 109.0], [50.4, 109.0], [50.5, 109.0], [50.6, 109.0], [50.7, 109.0], [50.8, 109.0], [50.9, 109.0], [51.0, 109.0], [51.1, 109.0], [51.2, 109.0], [51.3, 109.0], [51.4, 109.0], [51.5, 109.0], [51.6, 110.0], [51.7, 110.0], [51.8, 110.0], [51.9, 110.0], [52.0, 110.0], [52.1, 110.0], [52.2, 110.0], [52.3, 110.0], [52.4, 110.0], [52.5, 110.0], [52.6, 110.0], [52.7, 110.0], [52.8, 110.0], [52.9, 110.0], [53.0, 110.0], [53.1, 110.0], [53.2, 110.0], [53.3, 110.0], [53.4, 110.0], [53.5, 110.0], [53.6, 110.0], [53.7, 110.0], [53.8, 110.0], [53.9, 110.0], [54.0, 110.0], [54.1, 111.0], [54.2, 111.0], [54.3, 111.0], [54.4, 111.0], [54.5, 111.0], [54.6, 111.0], [54.7, 111.0], [54.8, 111.0], [54.9, 111.0], [55.0, 111.0], [55.1, 111.0], [55.2, 111.0], [55.3, 111.0], [55.4, 111.0], [55.5, 111.0], [55.6, 111.0], [55.7, 111.0], [55.8, 111.0], [55.9, 111.0], [56.0, 111.0], [56.1, 111.0], [56.2, 111.0], [56.3, 111.0], [56.4, 111.0], [56.5, 111.0], [56.6, 111.0], [56.7, 111.0], [56.8, 111.0], [56.9, 111.0], [57.0, 112.0], [57.1, 112.0], [57.2, 112.0], [57.3, 112.0], [57.4, 112.0], [57.5, 112.0], [57.6, 112.0], [57.7, 112.0], [57.8, 112.0], [57.9, 112.0], [58.0, 112.0], [58.1, 112.0], [58.2, 112.0], [58.3, 112.0], [58.4, 112.0], [58.5, 112.0], [58.6, 112.0], [58.7, 112.0], [58.8, 112.0], [58.9, 112.0], [59.0, 112.0], [59.1, 112.0], [59.2, 112.0], [59.3, 112.0], [59.4, 113.0], [59.5, 113.0], [59.6, 113.0], [59.7, 113.0], [59.8, 113.0], [59.9, 113.0], [60.0, 113.0], [60.1, 113.0], [60.2, 113.0], [60.3, 113.0], [60.4, 113.0], [60.5, 113.0], [60.6, 113.0], [60.7, 113.0], [60.8, 113.0], [60.9, 113.0], [61.0, 113.0], [61.1, 113.0], [61.2, 113.0], [61.3, 113.0], [61.4, 113.0], [61.5, 113.0], [61.6, 113.0], [61.7, 113.0], [61.8, 113.0], [61.9, 113.0], [62.0, 113.0], [62.1, 113.0], [62.2, 113.0], [62.3, 113.0], [62.4, 114.0], [62.5, 114.0], [62.6, 114.0], [62.7, 114.0], [62.8, 114.0], [62.9, 114.0], [63.0, 114.0], [63.1, 114.0], [63.2, 114.0], [63.3, 114.0], [63.4, 114.0], [63.5, 114.0], [63.6, 114.0], [63.7, 114.0], [63.8, 114.0], [63.9, 114.0], [64.0, 114.0], [64.1, 114.0], [64.2, 114.0], [64.3, 115.0], [64.4, 115.0], [64.5, 115.0], [64.6, 115.0], [64.7, 115.0], [64.8, 115.0], [64.9, 115.0], [65.0, 115.0], [65.1, 115.0], [65.2, 115.0], [65.3, 115.0], [65.4, 115.0], [65.5, 115.0], [65.6, 115.0], [65.7, 115.0], [65.8, 115.0], [65.9, 115.0], [66.0, 115.0], [66.1, 115.0], [66.2, 115.0], [66.3, 115.0], [66.4, 115.0], [66.5, 115.0], [66.6, 115.0], [66.7, 115.0], [66.8, 116.0], [66.9, 116.0], [67.0, 116.0], [67.1, 116.0], [67.2, 116.0], [67.3, 116.0], [67.4, 116.0], [67.5, 116.0], [67.6, 116.0], [67.7, 116.0], [67.8, 116.0], [67.9, 116.0], [68.0, 116.0], [68.1, 116.0], [68.2, 116.0], [68.3, 116.0], [68.4, 116.0], [68.5, 116.0], [68.6, 116.0], [68.7, 116.0], [68.8, 116.0], [68.9, 116.0], [69.0, 116.0], [69.1, 117.0], [69.2, 117.0], [69.3, 117.0], [69.4, 117.0], [69.5, 117.0], [69.6, 117.0], [69.7, 117.0], [69.8, 117.0], [69.9, 117.0], [70.0, 117.0], [70.1, 117.0], [70.2, 117.0], [70.3, 117.0], [70.4, 117.0], [70.5, 117.0], [70.6, 117.0], [70.7, 117.0], [70.8, 117.0], [70.9, 117.0], [71.0, 117.0], [71.1, 118.0], [71.2, 118.0], [71.3, 118.0], [71.4, 118.0], [71.5, 118.0], [71.6, 118.0], [71.7, 118.0], [71.8, 118.0], [71.9, 118.0], [72.0, 118.0], [72.1, 118.0], [72.2, 118.0], [72.3, 118.0], [72.4, 118.0], [72.5, 118.0], [72.6, 118.0], [72.7, 119.0], [72.8, 119.0], [72.9, 119.0], [73.0, 119.0], [73.1, 119.0], [73.2, 119.0], [73.3, 119.0], [73.4, 119.0], [73.5, 119.0], [73.6, 119.0], [73.7, 119.0], [73.8, 119.0], [73.9, 119.0], [74.0, 119.0], [74.1, 119.0], [74.2, 119.0], [74.3, 120.0], [74.4, 120.0], [74.5, 120.0], [74.6, 120.0], [74.7, 120.0], [74.8, 120.0], [74.9, 120.0], [75.0, 120.0], [75.1, 120.0], [75.2, 120.0], [75.3, 120.0], [75.4, 120.0], [75.5, 120.0], [75.6, 120.0], [75.7, 120.0], [75.8, 120.0], [75.9, 121.0], [76.0, 121.0], [76.1, 121.0], [76.2, 121.0], [76.3, 121.0], [76.4, 121.0], [76.5, 121.0], [76.6, 121.0], [76.7, 121.0], [76.8, 121.0], [76.9, 121.0], [77.0, 121.0], [77.1, 121.0], [77.2, 121.0], [77.3, 121.0], [77.4, 121.0], [77.5, 121.0], [77.6, 121.0], [77.7, 121.0], [77.8, 121.0], [77.9, 121.0], [78.0, 122.0], [78.1, 122.0], [78.2, 122.0], [78.3, 122.0], [78.4, 122.0], [78.5, 122.0], [78.6, 122.0], [78.7, 122.0], [78.8, 122.0], [78.9, 122.0], [79.0, 122.0], [79.1, 122.0], [79.2, 122.0], [79.3, 122.0], [79.4, 122.0], [79.5, 122.0], [79.6, 123.0], [79.7, 123.0], [79.8, 123.0], [79.9, 123.0], [80.0, 123.0], [80.1, 123.0], [80.2, 123.0], [80.3, 123.0], [80.4, 123.0], [80.5, 123.0], [80.6, 123.0], [80.7, 123.0], [80.8, 123.0], [80.9, 123.0], [81.0, 123.0], [81.1, 123.0], [81.2, 123.0], [81.3, 123.0], [81.4, 123.0], [81.5, 124.0], [81.6, 124.0], [81.7, 124.0], [81.8, 124.0], [81.9, 124.0], [82.0, 124.0], [82.1, 124.0], [82.2, 124.0], [82.3, 124.0], [82.4, 124.0], [82.5, 124.0], [82.6, 124.0], [82.7, 124.0], [82.8, 124.0], [82.9, 125.0], [83.0, 125.0], [83.1, 125.0], [83.2, 125.0], [83.3, 125.0], [83.4, 125.0], [83.5, 125.0], [83.6, 125.0], [83.7, 125.0], [83.8, 125.0], [83.9, 125.0], [84.0, 125.0], [84.1, 125.0], [84.2, 126.0], [84.3, 126.0], [84.4, 126.0], [84.5, 126.0], [84.6, 126.0], [84.7, 126.0], [84.8, 126.0], [84.9, 126.0], [85.0, 126.0], [85.1, 126.0], [85.2, 127.0], [85.3, 127.0], [85.4, 127.0], [85.5, 127.0], [85.6, 127.0], [85.7, 127.0], [85.8, 127.0], [85.9, 127.0], [86.0, 127.0], [86.1, 127.0], [86.2, 127.0], [86.3, 127.0], [86.4, 127.0], [86.5, 128.0], [86.6, 128.0], [86.7, 128.0], [86.8, 128.0], [86.9, 128.0], [87.0, 128.0], [87.1, 128.0], [87.2, 128.0], [87.3, 128.0], [87.4, 128.0], [87.5, 128.0], [87.6, 128.0], [87.7, 128.0], [87.8, 128.0], [87.9, 128.0], [88.0, 129.0], [88.1, 129.0], [88.2, 129.0], [88.3, 129.0], [88.4, 129.0], [88.5, 129.0], [88.6, 129.0], [88.7, 129.0], [88.8, 129.0], [88.9, 129.0], [89.0, 129.0], [89.1, 129.0], [89.2, 129.0], [89.3, 129.0], [89.4, 129.0], [89.5, 130.0], [89.6, 130.0], [89.7, 130.0], [89.8, 130.0], [89.9, 130.0], [90.0, 130.0], [90.1, 130.0], [90.2, 130.0], [90.3, 130.0], [90.4, 130.0], [90.5, 131.0], [90.6, 131.0], [90.7, 131.0], [90.8, 131.0], [90.9, 131.0], [91.0, 131.0], [91.1, 132.0], [91.2, 132.0], [91.3, 132.0], [91.4, 132.0], [91.5, 132.0], [91.6, 132.0], [91.7, 132.0], [91.8, 132.0], [91.9, 132.0], [92.0, 132.0], [92.1, 133.0], [92.2, 133.0], [92.3, 133.0], [92.4, 133.0], [92.5, 133.0], [92.6, 133.0], [92.7, 134.0], [92.8, 134.0], [92.9, 134.0], [93.0, 134.0], [93.1, 134.0], [93.2, 134.0], [93.3, 135.0], [93.4, 135.0], [93.5, 135.0], [93.6, 136.0], [93.7, 137.0], [93.8, 138.0], [93.9, 138.0], [94.0, 139.0], [94.1, 140.0], [94.2, 141.0], [94.3, 141.0], [94.4, 142.0], [94.5, 144.0], [94.6, 144.0], [94.7, 146.0], [94.8, 149.0], [94.9, 149.0], [95.0, 149.0], [95.1, 149.0], [95.2, 149.0], [95.3, 149.0], [95.4, 149.0], [95.5, 150.0], [95.6, 152.0], [95.7, 158.0], [95.8, 171.0], [95.9, 172.0], [96.0, 174.0], [96.1, 180.0], [96.2, 350.0], [96.3, 350.0], [96.4, 354.0], [96.5, 356.0], [96.6, 357.0], [96.7, 363.0], [96.8, 364.0], [96.9, 365.0], [97.0, 366.0], [97.1, 368.0], [97.2, 369.0], [97.3, 371.0], [97.4, 381.0], [97.5, 387.0], [97.6, 387.0], [97.7, 398.0], [97.8, 404.0], [97.9, 408.0], [98.0, 409.0], [98.1, 410.0], [98.2, 415.0], [98.3, 418.0], [98.4, 442.0], [98.5, 1099.0], [98.6, 1102.0], [98.7, 1102.0], [98.8, 1104.0], [98.9, 1110.0], [99.0, 1112.0], [99.1, 1114.0], [99.2, 1114.0], [99.3, 1122.0], [99.4, 1125.0], [99.5, 1130.0], [99.6, 1131.0], [99.7, 1135.0], [99.8, 2173.0], [99.9, 2192.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[0.0, 230.0], [0.1, 232.0], [0.2, 232.0], [0.3, 232.0], [0.4, 232.0], [0.5, 233.0], [0.6, 233.0], [0.7, 233.0], [0.8, 233.0], [0.9, 233.0], [1.0, 233.0], [1.1, 234.0], [1.2, 234.0], [1.3, 234.0], [1.4, 234.0], [1.5, 234.0], [1.6, 234.0], [1.7, 234.0], [1.8, 234.0], [1.9, 234.0], [2.0, 234.0], [2.1, 234.0], [2.2, 234.0], [2.3, 235.0], [2.4, 235.0], [2.5, 235.0], [2.6, 235.0], [2.7, 235.0], [2.8, 235.0], [2.9, 235.0], [3.0, 235.0], [3.1, 235.0], [3.2, 235.0], [3.3, 236.0], [3.4, 236.0], [3.5, 236.0], [3.6, 236.0], [3.7, 236.0], [3.8, 236.0], [3.9, 236.0], [4.0, 236.0], [4.1, 236.0], [4.2, 236.0], [4.3, 236.0], [4.4, 237.0], [4.5, 237.0], [4.6, 237.0], [4.7, 237.0], [4.8, 237.0], [4.9, 237.0], [5.0, 237.0], [5.1, 237.0], [5.2, 238.0], [5.3, 238.0], [5.4, 238.0], [5.5, 239.0], [5.6, 239.0], [5.7, 240.0], [5.8, 240.0], [5.9, 240.0], [6.0, 241.0], [6.1, 241.0], [6.2, 242.0], [6.3, 242.0], [6.4, 242.0], [6.5, 242.0], [6.6, 242.0], [6.7, 243.0], [6.8, 243.0], [6.9, 244.0], [7.0, 244.0], [7.1, 244.0], [7.2, 244.0], [7.3, 245.0], [7.4, 245.0], [7.5, 245.0], [7.6, 246.0], [7.7, 248.0], [7.8, 248.0], [7.9, 248.0], [8.0, 248.0], [8.1, 249.0], [8.2, 249.0], [8.3, 249.0], [8.4, 250.0], [8.5, 251.0], [8.6, 251.0], [8.7, 251.0], [8.8, 251.0], [8.9, 251.0], [9.0, 252.0], [9.1, 252.0], [9.2, 252.0], [9.3, 252.0], [9.4, 252.0], [9.5, 252.0], [9.6, 252.0], [9.7, 253.0], [9.8, 253.0], [9.9, 253.0], [10.0, 253.0], [10.1, 253.0], [10.2, 254.0], [10.3, 254.0], [10.4, 254.0], [10.5, 254.0], [10.6, 254.0], [10.7, 254.0], [10.8, 254.0], [10.9, 254.0], [11.0, 255.0], [11.1, 255.0], [11.2, 255.0], [11.3, 255.0], [11.4, 256.0], [11.5, 256.0], [11.6, 256.0], [11.7, 256.0], [11.8, 256.0], [11.9, 256.0], [12.0, 256.0], [12.1, 256.0], [12.2, 256.0], [12.3, 256.0], [12.4, 256.0], [12.5, 257.0], [12.6, 257.0], [12.7, 257.0], [12.8, 257.0], [12.9, 257.0], [13.0, 257.0], [13.1, 257.0], [13.2, 258.0], [13.3, 258.0], [13.4, 258.0], [13.5, 258.0], [13.6, 258.0], [13.7, 258.0], [13.8, 258.0], [13.9, 258.0], [14.0, 258.0], [14.1, 259.0], [14.2, 259.0], [14.3, 259.0], [14.4, 259.0], [14.5, 260.0], [14.6, 260.0], [14.7, 260.0], [14.8, 260.0], [14.9, 260.0], [15.0, 260.0], [15.1, 260.0], [15.2, 260.0], [15.3, 260.0], [15.4, 260.0], [15.5, 260.0], [15.6, 260.0], [15.7, 260.0], [15.8, 260.0], [15.9, 261.0], [16.0, 261.0], [16.1, 261.0], [16.2, 261.0], [16.3, 261.0], [16.4, 261.0], [16.5, 261.0], [16.6, 261.0], [16.7, 261.0], [16.8, 262.0], [16.9, 262.0], [17.0, 262.0], [17.1, 262.0], [17.2, 262.0], [17.3, 262.0], [17.4, 262.0], [17.5, 262.0], [17.6, 262.0], [17.7, 263.0], [17.8, 263.0], [17.9, 263.0], [18.0, 263.0], [18.1, 263.0], [18.2, 263.0], [18.3, 263.0], [18.4, 263.0], [18.5, 263.0], [18.6, 263.0], [18.7, 263.0], [18.8, 263.0], [18.9, 263.0], [19.0, 263.0], [19.1, 263.0], [19.2, 263.0], [19.3, 264.0], [19.4, 264.0], [19.5, 264.0], [19.6, 264.0], [19.7, 264.0], [19.8, 264.0], [19.9, 264.0], [20.0, 264.0], [20.1, 265.0], [20.2, 265.0], [20.3, 265.0], [20.4, 265.0], [20.5, 265.0], [20.6, 265.0], [20.7, 265.0], [20.8, 265.0], [20.9, 265.0], [21.0, 265.0], [21.1, 265.0], [21.2, 265.0], [21.3, 266.0], [21.4, 266.0], [21.5, 266.0], [21.6, 266.0], [21.7, 266.0], [21.8, 266.0], [21.9, 266.0], [22.0, 266.0], [22.1, 266.0], [22.2, 266.0], [22.3, 266.0], [22.4, 266.0], [22.5, 267.0], [22.6, 267.0], [22.7, 267.0], [22.8, 267.0], [22.9, 267.0], [23.0, 267.0], [23.1, 267.0], [23.2, 267.0], [23.3, 267.0], [23.4, 267.0], [23.5, 267.0], [23.6, 267.0], [23.7, 267.0], [23.8, 268.0], [23.9, 268.0], [24.0, 268.0], [24.1, 268.0], [24.2, 268.0], [24.3, 268.0], [24.4, 268.0], [24.5, 268.0], [24.6, 269.0], [24.7, 269.0], [24.8, 269.0], [24.9, 269.0], [25.0, 269.0], [25.1, 269.0], [25.2, 269.0], [25.3, 269.0], [25.4, 269.0], [25.5, 270.0], [25.6, 270.0], [25.7, 270.0], [25.8, 270.0], [25.9, 270.0], [26.0, 270.0], [26.1, 270.0], [26.2, 270.0], [26.3, 270.0], [26.4, 271.0], [26.5, 271.0], [26.6, 271.0], [26.7, 271.0], [26.8, 271.0], [26.9, 271.0], [27.0, 271.0], [27.1, 271.0], [27.2, 272.0], [27.3, 272.0], [27.4, 272.0], [27.5, 272.0], [27.6, 272.0], [27.7, 272.0], [27.8, 272.0], [27.9, 272.0], [28.0, 272.0], [28.1, 273.0], [28.2, 273.0], [28.3, 273.0], [28.4, 273.0], [28.5, 273.0], [28.6, 273.0], [28.7, 274.0], [28.8, 274.0], [28.9, 274.0], [29.0, 274.0], [29.1, 274.0], [29.2, 274.0], [29.3, 274.0], [29.4, 274.0], [29.5, 274.0], [29.6, 274.0], [29.7, 275.0], [29.8, 275.0], [29.9, 275.0], [30.0, 275.0], [30.1, 275.0], [30.2, 275.0], [30.3, 275.0], [30.4, 275.0], [30.5, 275.0], [30.6, 275.0], [30.7, 275.0], [30.8, 276.0], [30.9, 276.0], [31.0, 276.0], [31.1, 276.0], [31.2, 276.0], [31.3, 276.0], [31.4, 276.0], [31.5, 276.0], [31.6, 276.0], [31.7, 276.0], [31.8, 276.0], [31.9, 276.0], [32.0, 277.0], [32.1, 277.0], [32.2, 277.0], [32.3, 277.0], [32.4, 277.0], [32.5, 277.0], [32.6, 277.0], [32.7, 277.0], [32.8, 277.0], [32.9, 277.0], [33.0, 277.0], [33.1, 278.0], [33.2, 278.0], [33.3, 278.0], [33.4, 278.0], [33.5, 278.0], [33.6, 278.0], [33.7, 278.0], [33.8, 278.0], [33.9, 279.0], [34.0, 279.0], [34.1, 279.0], [34.2, 279.0], [34.3, 279.0], [34.4, 279.0], [34.5, 279.0], [34.6, 280.0], [34.7, 280.0], [34.8, 280.0], [34.9, 280.0], [35.0, 280.0], [35.1, 280.0], [35.2, 280.0], [35.3, 280.0], [35.4, 280.0], [35.5, 280.0], [35.6, 280.0], [35.7, 281.0], [35.8, 281.0], [35.9, 281.0], [36.0, 281.0], [36.1, 281.0], [36.2, 281.0], [36.3, 281.0], [36.4, 281.0], [36.5, 282.0], [36.6, 282.0], [36.7, 282.0], [36.8, 282.0], [36.9, 282.0], [37.0, 282.0], [37.1, 282.0], [37.2, 282.0], [37.3, 282.0], [37.4, 283.0], [37.5, 283.0], [37.6, 283.0], [37.7, 283.0], [37.8, 283.0], [37.9, 283.0], [38.0, 284.0], [38.1, 284.0], [38.2, 284.0], [38.3, 284.0], [38.4, 284.0], [38.5, 284.0], [38.6, 284.0], [38.7, 285.0], [38.8, 285.0], [38.9, 285.0], [39.0, 285.0], [39.1, 285.0], [39.2, 285.0], [39.3, 285.0], [39.4, 285.0], [39.5, 285.0], [39.6, 286.0], [39.7, 286.0], [39.8, 286.0], [39.9, 286.0], [40.0, 286.0], [40.1, 286.0], [40.2, 286.0], [40.3, 287.0], [40.4, 287.0], [40.5, 287.0], [40.6, 287.0], [40.7, 287.0], [40.8, 287.0], [40.9, 287.0], [41.0, 287.0], [41.1, 288.0], [41.2, 288.0], [41.3, 288.0], [41.4, 288.0], [41.5, 288.0], [41.6, 288.0], [41.7, 288.0], [41.8, 288.0], [41.9, 288.0], [42.0, 289.0], [42.1, 289.0], [42.2, 289.0], [42.3, 289.0], [42.4, 289.0], [42.5, 289.0], [42.6, 290.0], [42.7, 290.0], [42.8, 290.0], [42.9, 290.0], [43.0, 290.0], [43.1, 290.0], [43.2, 291.0], [43.3, 291.0], [43.4, 291.0], [43.5, 291.0], [43.6, 291.0], [43.7, 291.0], [43.8, 291.0], [43.9, 291.0], [44.0, 291.0], [44.1, 291.0], [44.2, 292.0], [44.3, 292.0], [44.4, 292.0], [44.5, 292.0], [44.6, 292.0], [44.7, 292.0], [44.8, 292.0], [44.9, 292.0], [45.0, 293.0], [45.1, 293.0], [45.2, 293.0], [45.3, 293.0], [45.4, 293.0], [45.5, 293.0], [45.6, 293.0], [45.7, 294.0], [45.8, 294.0], [45.9, 294.0], [46.0, 294.0], [46.1, 294.0], [46.2, 294.0], [46.3, 294.0], [46.4, 294.0], [46.5, 294.0], [46.6, 294.0], [46.7, 294.0], [46.8, 295.0], [46.9, 295.0], [47.0, 295.0], [47.1, 295.0], [47.2, 295.0], [47.3, 295.0], [47.4, 295.0], [47.5, 296.0], [47.6, 296.0], [47.7, 296.0], [47.8, 296.0], [47.9, 297.0], [48.0, 297.0], [48.1, 297.0], [48.2, 297.0], [48.3, 297.0], [48.4, 297.0], [48.5, 297.0], [48.6, 297.0], [48.7, 297.0], [48.8, 298.0], [48.9, 298.0], [49.0, 298.0], [49.1, 298.0], [49.2, 298.0], [49.3, 298.0], [49.4, 298.0], [49.5, 299.0], [49.6, 299.0], [49.7, 299.0], [49.8, 299.0], [49.9, 300.0], [50.0, 300.0], [50.1, 300.0], [50.2, 300.0], [50.3, 300.0], [50.4, 301.0], [50.5, 301.0], [50.6, 301.0], [50.7, 301.0], [50.8, 301.0], [50.9, 301.0], [51.0, 301.0], [51.1, 301.0], [51.2, 301.0], [51.3, 302.0], [51.4, 302.0], [51.5, 302.0], [51.6, 302.0], [51.7, 302.0], [51.8, 303.0], [51.9, 303.0], [52.0, 303.0], [52.1, 304.0], [52.2, 304.0], [52.3, 304.0], [52.4, 304.0], [52.5, 304.0], [52.6, 305.0], [52.7, 305.0], [52.8, 305.0], [52.9, 305.0], [53.0, 305.0], [53.1, 306.0], [53.2, 306.0], [53.3, 306.0], [53.4, 306.0], [53.5, 306.0], [53.6, 306.0], [53.7, 307.0], [53.8, 307.0], [53.9, 307.0], [54.0, 307.0], [54.1, 307.0], [54.2, 307.0], [54.3, 307.0], [54.4, 307.0], [54.5, 307.0], [54.6, 307.0], [54.7, 308.0], [54.8, 308.0], [54.9, 308.0], [55.0, 308.0], [55.1, 308.0], [55.2, 309.0], [55.3, 309.0], [55.4, 309.0], [55.5, 309.0], [55.6, 310.0], [55.7, 310.0], [55.8, 310.0], [55.9, 310.0], [56.0, 311.0], [56.1, 311.0], [56.2, 311.0], [56.3, 311.0], [56.4, 312.0], [56.5, 312.0], [56.6, 313.0], [56.7, 313.0], [56.8, 313.0], [56.9, 314.0], [57.0, 314.0], [57.1, 315.0], [57.2, 315.0], [57.3, 315.0], [57.4, 315.0], [57.5, 316.0], [57.6, 316.0], [57.7, 317.0], [57.8, 317.0], [57.9, 318.0], [58.0, 318.0], [58.1, 318.0], [58.2, 318.0], [58.3, 318.0], [58.4, 319.0], [58.5, 321.0], [58.6, 321.0], [58.7, 322.0], [58.8, 322.0], [58.9, 323.0], [59.0, 324.0], [59.1, 326.0], [59.2, 326.0], [59.3, 327.0], [59.4, 328.0], [59.5, 328.0], [59.6, 329.0], [59.7, 329.0], [59.8, 331.0], [59.9, 331.0], [60.0, 332.0], [60.1, 333.0], [60.2, 334.0], [60.3, 335.0], [60.4, 336.0], [60.5, 336.0], [60.6, 338.0], [60.7, 340.0], [60.8, 340.0], [60.9, 340.0], [61.0, 342.0], [61.1, 343.0], [61.2, 345.0], [61.3, 346.0], [61.4, 349.0], [61.5, 352.0], [61.6, 354.0], [61.7, 356.0], [61.8, 357.0], [61.9, 360.0], [62.0, 373.0], [62.1, 376.0], [62.2, 387.0], [62.3, 389.0], [62.4, 390.0], [62.5, 399.0], [62.6, 411.0], [62.7, 445.0], [62.8, 445.0], [62.9, 446.0], [63.0, 449.0], [63.1, 456.0], [63.2, 457.0], [63.3, 464.0], [63.4, 479.0], [63.5, 488.0], [63.6, 519.0], [63.7, 523.0], [63.8, 525.0], [63.9, 527.0], [64.0, 548.0], [64.1, 548.0], [64.2, 558.0], [64.3, 560.0], [64.4, 566.0], [64.5, 576.0], [64.6, 582.0], [64.7, 582.0], [64.8, 589.0], [64.9, 596.0], [65.0, 597.0], [65.1, 598.0], [65.2, 599.0], [65.3, 601.0], [65.4, 602.0], [65.5, 603.0], [65.6, 603.0], [65.7, 604.0], [65.8, 610.0], [65.9, 618.0], [66.0, 618.0], [66.1, 621.0], [66.2, 628.0], [66.3, 628.0], [66.4, 636.0], [66.5, 637.0], [66.6, 642.0], [66.7, 643.0], [66.8, 644.0], [66.9, 651.0], [67.0, 681.0], [67.1, 683.0], [67.2, 689.0], [67.3, 702.0], [67.4, 714.0], [67.5, 763.0], [67.6, 787.0], [67.7, 808.0], [67.8, 855.0], [67.9, 894.0], [68.0, 979.0], [68.1, 987.0], [68.2, 1248.0], [68.3, 1258.0], [68.4, 1259.0], [68.5, 1261.0], [68.6, 1261.0], [68.7, 1264.0], [68.8, 1266.0], [68.9, 1268.0], [69.0, 1268.0], [69.1, 1268.0], [69.2, 1269.0], [69.3, 1271.0], [69.4, 1291.0], [69.5, 1291.0], [69.6, 1292.0], [69.7, 1293.0], [69.8, 1293.0], [69.9, 1296.0], [70.0, 1301.0], [70.1, 1303.0], [70.2, 1305.0], [70.3, 1307.0], [70.4, 1310.0], [70.5, 1311.0], [70.6, 1321.0], [70.7, 1337.0], [70.8, 1423.0], [70.9, 1553.0], [71.0, 1707.0], [71.1, 1755.0], [71.2, 1787.0], [71.3, 1844.0], [71.4, 1850.0], [71.5, 1895.0], [71.6, 1904.0], [71.7, 1918.0], [71.8, 1923.0], [71.9, 1938.0], [72.0, 1943.0], [72.1, 1958.0], [72.2, 1959.0], [72.3, 1965.0], [72.4, 1971.0], [72.5, 1977.0], [72.6, 1979.0], [72.7, 1985.0], [72.8, 1985.0], [72.9, 1987.0], [73.0, 1992.0], [73.1, 1992.0], [73.2, 2001.0], [73.3, 2007.0], [73.4, 2014.0], [73.5, 2037.0], [73.6, 2038.0], [73.7, 2041.0], [73.8, 2043.0], [73.9, 2044.0], [74.0, 2050.0], [74.1, 2057.0], [74.2, 2058.0], [74.3, 2060.0], [74.4, 2062.0], [74.5, 2073.0], [74.6, 2076.0], [74.7, 2078.0], [74.8, 2080.0], [74.9, 2083.0], [75.0, 2086.0], [75.1, 2091.0], [75.2, 2095.0], [75.3, 2102.0], [75.4, 2106.0], [75.5, 2106.0], [75.6, 2107.0], [75.7, 2109.0], [75.8, 2111.0], [75.9, 2111.0], [76.0, 2120.0], [76.1, 2122.0], [76.2, 2123.0], [76.3, 2126.0], [76.4, 2128.0], [76.5, 2129.0], [76.6, 2131.0], [76.7, 2131.0], [76.8, 2135.0], [76.9, 2135.0], [77.0, 2139.0], [77.1, 2143.0], [77.2, 2146.0], [77.3, 2148.0], [77.4, 2149.0], [77.5, 2150.0], [77.6, 2151.0], [77.7, 2152.0], [77.8, 2155.0], [77.9, 2158.0], [78.0, 2168.0], [78.1, 2170.0], [78.2, 2172.0], [78.3, 2177.0], [78.4, 2184.0], [78.5, 2184.0], [78.6, 2185.0], [78.7, 2187.0], [78.8, 2188.0], [78.9, 2192.0], [79.0, 2196.0], [79.1, 2198.0], [79.2, 2199.0], [79.3, 2201.0], [79.4, 2207.0], [79.5, 2212.0], [79.6, 2213.0], [79.7, 2214.0], [79.8, 2215.0], [79.9, 2217.0], [80.0, 2222.0], [80.1, 2224.0], [80.2, 2227.0], [80.3, 2229.0], [80.4, 2229.0], [80.5, 2235.0], [80.6, 2241.0], [80.7, 2245.0], [80.8, 2248.0], [80.9, 2249.0], [81.0, 2249.0], [81.1, 2250.0], [81.2, 2254.0], [81.3, 2256.0], [81.4, 2266.0], [81.5, 2267.0], [81.6, 2270.0], [81.7, 2273.0], [81.8, 2277.0], [81.9, 2278.0], [82.0, 2288.0], [82.1, 2293.0], [82.2, 2294.0], [82.3, 2295.0], [82.4, 2300.0], [82.5, 2302.0], [82.6, 2305.0], [82.7, 2309.0], [82.8, 2313.0], [82.9, 2316.0], [83.0, 2316.0], [83.1, 2319.0], [83.2, 2325.0], [83.3, 2328.0], [83.4, 2332.0], [83.5, 2334.0], [83.6, 2339.0], [83.7, 2351.0], [83.8, 2351.0], [83.9, 2355.0], [84.0, 2358.0], [84.1, 2361.0], [84.2, 2362.0], [84.3, 2363.0], [84.4, 2366.0], [84.5, 2370.0], [84.6, 2371.0], [84.7, 2374.0], [84.8, 2376.0], [84.9, 2386.0], [85.0, 2387.0], [85.1, 2389.0], [85.2, 2390.0], [85.3, 2394.0], [85.4, 2396.0], [85.5, 2403.0], [85.6, 2414.0], [85.7, 2415.0], [85.8, 2416.0], [85.9, 2417.0], [86.0, 2423.0], [86.1, 2438.0], [86.2, 2447.0], [86.3, 2454.0], [86.4, 2460.0], [86.5, 2460.0], [86.6, 2467.0], [86.7, 2467.0], [86.8, 2468.0], [86.9, 2471.0], [87.0, 2478.0], [87.1, 2479.0], [87.2, 2483.0], [87.3, 2484.0], [87.4, 2484.0], [87.5, 2484.0], [87.6, 2489.0], [87.7, 2501.0], [87.8, 2520.0], [87.9, 2538.0], [88.0, 2543.0], [88.1, 2570.0], [88.2, 2570.0], [88.3, 2573.0], [88.4, 2573.0], [88.5, 2582.0], [88.6, 2582.0], [88.7, 2588.0], [88.8, 2595.0], [88.9, 2606.0], [89.0, 2614.0], [89.1, 2617.0], [89.2, 2618.0], [89.3, 2625.0], [89.4, 2626.0], [89.5, 2657.0], [89.6, 2675.0], [89.7, 2678.0], [89.8, 2679.0], [89.9, 2690.0], [90.0, 2695.0], [90.1, 2706.0], [90.2, 2706.0], [90.3, 2709.0], [90.4, 2717.0], [90.5, 2718.0], [90.6, 2722.0], [90.7, 2725.0], [90.8, 2733.0], [90.9, 2741.0], [91.0, 2742.0], [91.1, 2751.0], [91.2, 2766.0], [91.3, 2774.0], [91.4, 2777.0], [91.5, 2787.0], [91.6, 2800.0], [91.7, 2820.0], [91.8, 2856.0], [91.9, 2903.0], [92.0, 2904.0], [92.1, 2913.0], [92.2, 2947.0], [92.3, 3037.0], [92.4, 3065.0], [92.5, 3093.0], [92.6, 3137.0], [92.7, 3137.0], [92.8, 3154.0], [92.9, 3195.0], [93.0, 3197.0], [93.1, 3198.0], [93.2, 3224.0], [93.3, 3275.0], [93.4, 3275.0], [93.5, 3340.0], [93.6, 3361.0], [93.7, 3389.0], [93.8, 3399.0], [93.9, 3412.0], [94.0, 3416.0], [94.1, 3418.0], [94.2, 3419.0], [94.3, 3435.0], [94.4, 3464.0], [94.5, 3468.0], [94.6, 3472.0], [94.7, 3510.0], [94.8, 3546.0], [94.9, 3559.0], [95.0, 3604.0], [95.1, 3630.0], [95.2, 3673.0], [95.3, 3700.0], [95.4, 3704.0], [95.5, 3726.0], [95.6, 3741.0], [95.7, 3767.0], [95.8, 3775.0], [95.9, 3775.0], [96.0, 3827.0], [96.1, 3878.0], [96.2, 3885.0], [96.3, 3900.0], [96.4, 3922.0], [96.5, 3945.0], [96.6, 3982.0], [96.7, 4000.0], [96.8, 4001.0], [96.9, 4032.0], [97.0, 4034.0], [97.1, 4054.0], [97.2, 4060.0], [97.3, 4108.0], [97.4, 4122.0], [97.5, 4182.0], [97.6, 4207.0], [97.7, 4211.0], [97.8, 4215.0], [97.9, 4219.0], [98.0, 4301.0], [98.1, 4316.0], [98.2, 4360.0], [98.3, 4373.0], [98.4, 4378.0], [98.5, 4420.0], [98.6, 4435.0], [98.7, 4469.0], [98.8, 4478.0], [98.9, 4514.0], [99.0, 4516.0], [99.1, 4621.0], [99.2, 4690.0], [99.3, 4715.0], [99.4, 4732.0], [99.5, 4767.0], [99.6, 4973.0], [99.7, 4981.0], [99.8, 5037.0], [99.9, 5306.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 687.0, "series": [{"data": [[600.0, 2.0], [700.0, 3.0], [800.0, 1.0], [1100.0, 16.0], [1300.0, 1.0], [1500.0, 1.0], [100.0, 607.0], [1600.0, 3.0], [1700.0, 5.0], [1800.0, 15.0], [1900.0, 24.0], [2000.0, 39.0], [2100.0, 36.0], [2300.0, 24.0], [2200.0, 23.0], [2400.0, 11.0], [2500.0, 12.0], [2600.0, 15.0], [2700.0, 2.0], [2800.0, 3.0], [2900.0, 3.0], [3000.0, 5.0], [3100.0, 3.0], [200.0, 46.0], [3200.0, 4.0], [3300.0, 9.0], [3400.0, 3.0], [3500.0, 2.0], [3600.0, 7.0], [3700.0, 4.0], [3800.0, 4.0], [3900.0, 4.0], [4000.0, 3.0], [4100.0, 4.0], [4200.0, 5.0], [4300.0, 5.0], [4500.0, 3.0], [4600.0, 3.0], [4400.0, 1.0], [300.0, 11.0], [4800.0, 2.0], [5200.0, 1.0], [400.0, 3.0], [500.0, 22.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[0.0, 275.0], [2100.0, 2.0], [1100.0, 12.0], [300.0, 16.0], [100.0, 687.0], [400.0, 7.0], [1000.0, 1.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[600.0, 21.0], [700.0, 4.0], [800.0, 3.0], [900.0, 2.0], [1200.0, 18.0], [1300.0, 8.0], [1400.0, 1.0], [1500.0, 1.0], [1700.0, 3.0], [1800.0, 3.0], [1900.0, 16.0], [2000.0, 21.0], [2100.0, 40.0], [2300.0, 31.0], [2200.0, 31.0], [2400.0, 22.0], [2500.0, 12.0], [2600.0, 12.0], [2700.0, 15.0], [2800.0, 3.0], [2900.0, 4.0], [3000.0, 3.0], [3100.0, 6.0], [200.0, 498.0], [3300.0, 4.0], [3200.0, 3.0], [3400.0, 8.0], [3500.0, 3.0], [3700.0, 7.0], [3600.0, 3.0], [3800.0, 3.0], [3900.0, 4.0], [4000.0, 6.0], [4200.0, 4.0], [4300.0, 5.0], [4100.0, 3.0], [4400.0, 4.0], [4600.0, 2.0], [4500.0, 2.0], [300.0, 127.0], [4700.0, 3.0], [5000.0, 1.0], [4900.0, 2.0], [5300.0, 1.0], [400.0, 10.0], [500.0, 17.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 5300.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 13.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1426.0, "series": [{"data": [[0.0, 985.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 13.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 576.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 1426.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 46.49860335195527, "minX": 1.70307084E12, "maxY": 50.85858143607707, "series": [{"data": [[1.7030709E12, 46.49860335195527], [1.70307084E12, 50.85858143607707]], "isOverall": false, "label": "Users", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7030709E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 91.0, "minX": 1.0, "maxY": 3827.0, "series": [{"data": [[2.0, 3615.0], [3.0, 2752.0], [4.0, 2514.0], [5.0, 2637.0], [6.0, 2526.0], [7.0, 2690.0], [8.0, 3356.0], [9.0, 1932.0], [10.0, 2206.0], [11.0, 1992.0], [12.0, 2695.0], [13.0, 2373.0], [14.0, 2313.0], [16.0, 2438.0], [17.0, 2627.0], [18.0, 2215.0], [19.0, 2617.0], [20.0, 2369.0], [21.0, 2663.0], [22.0, 2655.0], [24.0, 2425.5], [25.0, 2314.0], [26.0, 2580.0], [27.0, 3243.0], [28.0, 2249.0], [29.0, 2124.0], [30.0, 2199.0], [31.0, 2293.0], [33.0, 2108.0], [32.0, 3699.0], [35.0, 167.0], [34.0, 2196.0], [37.0, 2185.0], [36.0, 180.0], [39.0, 180.0], [38.0, 2039.0], [41.0, 194.0], [40.0, 202.0], [43.0, 151.54545454545453], [42.0, 184.3333333333333], [45.0, 379.68], [44.0, 645.0], [47.0, 910.1764705882354], [46.0, 668.7567567567568], [49.0, 987.8446601941747], [48.0, 845.4714285714285], [50.0, 923.4177215189873], [51.0, 1114.0972222222222], [52.0, 804.2542372881354], [53.0, 867.9552238805969], [54.0, 1003.9550561797752], [55.0, 974.5733333333338], [57.0, 980.5641025641028], [56.0, 884.7187499999997], [59.0, 624.7692307692308], [58.0, 765.3030303030304], [61.0, 668.0], [60.0, 1427.1666666666665], [1.0, 3040.0]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[49.818000000000005, 903.5739999999995]], "isOverall": false, "label": "HTTP Request-1-Aggregated", "isController": false}, {"data": [[2.0, 111.0], [3.0, 104.0], [4.0, 104.0], [5.0, 96.0], [6.0, 99.0], [7.0, 97.0], [8.0, 112.0], [9.0, 104.0], [10.0, 110.0], [11.0, 94.0], [12.0, 105.0], [13.0, 111.0], [14.0, 110.0], [16.0, 99.0], [17.0, 91.0], [18.0, 116.0], [19.0, 124.0], [20.0, 102.0], [21.0, 103.0], [22.0, 95.0], [24.0, 598.0], [25.0, 103.0], [26.0, 97.0], [27.0, 117.0], [28.0, 105.0], [29.0, 110.0], [30.0, 105.0], [31.0, 101.0], [33.0, 105.0], [32.0, 127.0], [35.0, 125.0], [34.0, 132.0], [37.0, 115.0], [36.0, 106.0], [39.0, 102.0], [38.0, 109.0], [41.0, 103.0], [40.0, 93.0], [43.0, 97.95454545454545], [42.0, 92.43749999999997], [45.0, 105.95999999999998], [44.0, 105.73684210526316], [47.0, 116.32352941176471], [46.0, 106.5945945945946], [49.0, 112.45631067961168], [48.0, 137.38571428571427], [50.0, 176.8101265822784], [51.0, 122.11111111111107], [52.0, 135.33898305084745], [53.0, 118.50746268656715], [54.0, 120.12359550561798], [55.0, 169.94666666666663], [57.0, 125.7948717948718], [56.0, 156.09375], [59.0, 194.07692307692307], [58.0, 181.1818181818182], [61.0, 115.4], [60.0, 152.66666666666666], [1.0, 114.0]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[49.818000000000005, 132.71300000000005]], "isOverall": false, "label": "HTTP Request-0-Aggregated", "isController": false}, {"data": [[2.0, 3726.0], [3.0, 2856.0], [4.0, 2618.0], [5.0, 2733.0], [6.0, 2625.0], [7.0, 2787.0], [8.0, 3468.0], [9.0, 2037.0], [10.0, 2316.0], [11.0, 2086.0], [12.0, 2800.0], [13.0, 2484.0], [14.0, 2423.0], [16.0, 2537.5], [17.0, 2718.0], [18.0, 2332.0], [19.0, 2742.0], [20.0, 2471.0], [21.0, 2766.0], [22.0, 2751.0], [24.0, 3023.5], [25.0, 2417.0], [26.0, 2678.0], [27.0, 3361.0], [28.0, 2355.0], [29.0, 2235.0], [30.0, 2305.0], [31.0, 2394.0], [33.0, 2213.0], [32.0, 3827.0], [35.0, 292.0], [34.0, 2328.0], [37.0, 2300.0], [36.0, 286.0], [39.0, 282.0], [38.0, 2149.0], [41.0, 297.0], [40.0, 295.0], [43.0, 249.86363636363637], [42.0, 277.12499999999994], [45.0, 485.84], [44.0, 751.1052631578947], [47.0, 1026.764705882353], [46.0, 775.5945945945945], [49.0, 1100.6893203883494], [48.0, 984.1142857142858], [50.0, 1100.5569620253164], [51.0, 1236.6250000000005], [52.0, 939.9999999999999], [53.0, 986.850746268657], [54.0, 1124.494382022472], [55.0, 1145.0266666666664], [57.0, 1106.7948717948718], [56.0, 1041.2500000000005], [59.0, 820.3846153846154], [58.0, 946.8484848484849], [61.0, 783.6], [60.0, 1580.1666666666665], [1.0, 3154.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[49.818000000000005, 1036.7430000000002]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 61.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2000.5333333333333, "minX": 1.70307084E12, "maxY": 4626595.066666666, "series": [{"data": [[1.7030709E12, 2285834.066666667], [1.70307084E12, 4626595.066666666]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.7030709E12, 2000.5333333333333], [1.70307084E12, 6266.133333333333]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7030709E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 125.15482233502546, "minX": 1.70307084E12, "maxY": 1259.6031746031747, "series": [{"data": [[1.7030709E12, 1106.111111111111], [1.70307084E12, 835.3395721925131]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.7030709E12, 160.80660377358495], [1.70307084E12, 125.15482233502546]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.7030709E12, 1259.6031746031747], [1.70307084E12, 961.661764705883]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7030709E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 125.08629441624362, "minX": 1.70307084E12, "maxY": 795.7380952380954, "series": [{"data": [[1.7030709E12, 795.7380952380954], [1.70307084E12, 604.0401069518713]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.7030709E12, 160.80660377358495], [1.70307084E12, 125.08629441624362]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.7030709E12, 153.1507936507937], [1.70307084E12, 125.75534759358287]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7030709E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 63.15609137055836, "minX": 1.70307084E12, "maxY": 160.08422459893058, "series": [{"data": [[1.7030709E12, 150.98809523809513], [1.70307084E12, 160.08422459893058]], "isOverall": false, "label": "HTTP Request-1", "isController": false}, {"data": [[1.7030709E12, 102.96226415094337], [1.70307084E12, 63.15609137055836]], "isOverall": false, "label": "HTTP Request-0", "isController": false}, {"data": [[1.7030709E12, 94.44841269841274], [1.70307084E12, 63.89572192513368]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7030709E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 89.0, "minX": 1.70307084E12, "maxY": 5306.0, "series": [{"data": [[1.7030709E12, 5306.0], [1.70307084E12, 5037.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.7030709E12, 3012.099999999999], [1.70307084E12, 2776.1000000000004]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.7030709E12, 4872.729999999997], [1.70307084E12, 4533.169999999998]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.7030709E12, 3664.299999999998], [1.70307084E12, 3797.3999999999996]], "isOverall": false, "label": "95th percentile", "isController": false}, {"data": [[1.7030709E12, 89.0], [1.70307084E12, 89.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.7030709E12, 161.5], [1.70307084E12, 119.0]], "isOverall": false, "label": "Median", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7030709E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 92.0, "minX": 2.0, "maxY": 3097.0, "series": [{"data": [[134.0, 127.5], [2.0, 3097.0], [140.0, 125.0], [139.0, 116.0], [142.0, 124.5], [145.0, 122.0], [148.0, 126.5], [146.0, 125.5], [36.0, 2447.0], [154.0, 92.0], [156.0, 115.5], [155.0, 123.0], [153.0, 115.0], [160.0, 125.0], [172.0, 246.5], [168.0, 126.5], [170.0, 113.0], [45.0, 102.0], [177.0, 124.0], [14.0, 2742.5], [58.0, 2152.0], [108.0, 101.0], [122.0, 120.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[134.0, 262.5], [140.0, 267.5], [139.0, 246.0], [142.0, 293.0], [145.0, 263.5], [148.0, 261.0], [146.0, 271.0], [154.0, 208.0], [156.0, 257.0], [155.0, 243.0], [153.0, 252.0], [160.0, 252.0], [172.0, 252.0], [168.0, 255.5], [170.0, 245.0], [45.0, 257.0], [177.0, 262.5], [58.0, 223.0], [108.0, 232.0], [122.0, 262.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 177.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 92.0, "minX": 2.0, "maxY": 1362.0, "series": [{"data": [[134.0, 116.0], [2.0, 893.0], [140.0, 120.0], [139.0, 111.0], [142.0, 120.0], [145.0, 117.0], [148.0, 121.0], [146.0, 115.0], [36.0, 1362.0], [154.0, 92.0], [156.0, 110.0], [155.0, 111.0], [153.0, 110.0], [160.0, 116.5], [172.0, 112.5], [168.0, 116.0], [170.0, 103.0], [45.0, 101.0], [177.0, 112.0], [14.0, 836.5], [58.0, 121.0], [108.0, 101.0], [122.0, 116.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[134.0, 147.0], [140.0, 149.0], [139.0, 148.5], [142.0, 172.0], [145.0, 151.5], [148.0, 147.0], [146.0, 150.0], [154.0, 130.5], [156.0, 152.5], [155.0, 141.5], [153.0, 146.0], [160.0, 154.0], [172.0, 146.0], [168.0, 142.0], [170.0, 141.0], [45.0, 125.0], [177.0, 150.5], [58.0, 138.0], [108.0, 137.0], [122.0, 138.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 177.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 10.333333333333334, "minX": 1.70307084E12, "maxY": 39.666666666666664, "series": [{"data": [[1.7030709E12, 10.333333333333334], [1.70307084E12, 39.666666666666664]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7030709E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 3.1666666666666665, "minX": 1.70307084E12, "maxY": 18.533333333333335, "series": [{"data": [[1.7030709E12, 3.1666666666666665], [1.70307084E12, 6.4]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.7030709E12, 3.533333333333333], [1.70307084E12, 13.133333333333333]], "isOverall": false, "label": "301", "isController": false}, {"data": [[1.7030709E12, 5.233333333333333], [1.70307084E12, 18.533333333333335]], "isOverall": false, "label": "503", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.7030709E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 1.5833333333333333, "minX": 1.70307084E12, "maxY": 13.133333333333333, "series": [{"data": [[1.7030709E12, 2.6166666666666667], [1.70307084E12, 9.266666666666667]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}, {"data": [[1.7030709E12, 1.5833333333333333], [1.70307084E12, 3.2]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.7030709E12, 3.533333333333333], [1.70307084E12, 13.133333333333333]], "isOverall": false, "label": "HTTP Request-0-success", "isController": false}, {"data": [[1.7030709E12, 2.6166666666666667], [1.70307084E12, 9.266666666666667]], "isOverall": false, "label": "HTTP Request-1-failure", "isController": false}, {"data": [[1.7030709E12, 1.5833333333333333], [1.70307084E12, 3.2]], "isOverall": false, "label": "HTTP Request-1-success", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7030709E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 5.233333333333333, "minX": 1.70307084E12, "maxY": 19.533333333333335, "series": [{"data": [[1.7030709E12, 6.7], [1.70307084E12, 19.533333333333335]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.7030709E12, 5.233333333333333], [1.70307084E12, 18.533333333333335]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.7030709E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 18000000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

